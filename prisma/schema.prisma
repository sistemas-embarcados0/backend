generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserPermission {
  COMMON
  ADMIN
}

model User {
  id            String @id @default(uuid()) @map("_id")
  name          String
  email         String @unique
  password_hash String

  // Relacionamento 1:N
  registers Register[]

  // Definindo a permissão do usuário como enum
  user_permission UserPermission @default(COMMON)

  // Relacionamento N:N com Room através de UserRoomAccess
  access_rooms  UserRoomAccess[]
  AccessRequest AccessRequest[]

  @@map("users")
}

model Room {
  id              String            @id @default(uuid()) @map("_id")
  name            String            @unique
  // Relacionamento 1:N
  airconditioners AirConditioning[]
  doors           Door[]
  lights          Light[]

  // Relacionamento N:N com User através de UserRoomAccess
  access_users UserRoomAccess[]

  @@map("rooms")
}

model UserRoomAccess {
  id     String @id @default(uuid()) @map("_id")
  userId String
  roomId String

  // Relacionamentos com User e Room
  user User @relation(fields: [userId], references: [id])
  room Room @relation(fields: [roomId], references: [id])

  @@map("user_room_access")
}

model Door {
  id        String  @id @default(uuid()) @map("_id")
  activated Boolean @default(false)

  // Chave estrangeira
  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  @@map("doors")
}

model Light {
  id        String  @id @default(uuid()) @map("_id")
  activated Boolean @default(false)

  // Chave estrangeira
  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  @@map("lights")
}

model AirConditioning {
  id        String  @id @default(uuid()) @map("_id")
  activated Boolean @default(false)

  // Chave estrangeira
  roomId String
  room   Room   @relation(fields: [roomId], references: [id])

  @@map("airconditioners")
}

model Register {
  id               String   @id @default(uuid()) @map("_id")
  modificationDate DateTime

  // Chave estrangeira
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("registers")
}

model AccessRequest {
  id     String @id @default(uuid()) @map("_id")
  userId String
  user   User   @relation(fields: [userId], references: [id])

  roomIds String[] // Considerar um relacionamento com Room também, se necessário

  status    RequestStatus @default(PENDING)
  createdAt DateTime      @default(now())

  @@map("access_requests")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
